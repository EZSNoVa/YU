import type { Writable } from "svelte/store";


export const Jokers: Record<string, string> = {
    Skip: "Avoid having to comply with the sentence",
    Mirror: "Makes the other player have to comply with the sentence as well. Only once; +4 doesn't affect Mirror",
    Gaze: "10% worth of words of the sentence will be revealed",
    Decoy: "At the end of the round, round will be restarted",
    Darkness: "Respondent options will be hidden and randomly mixed-up",
    Illusion: "Time will be reduced by half, third, or quarter, randomly",
    Foresight: "Prevent other player from using a joker",
    Revelation: "Reveal 2 of other player's jokers"
};


export enum ResponseType {
    DO_IT = "DO_IT",
    PLUS_FOUR = "PLUS_FOUR",
    REVERSE = "REVERSE",
}

export type UID = string; // User ID -- unique identifier for each user. Generated by the user's client

export enum Role {
    JUDGE = "Judge",
    RESPONDENT = "Respondent"
}


export type RoomType = {
    id: string,
    creation_time: Date, // Date when the room was created
    jokers_used: number,
    used_responses: Record<ResponseType, number>, // {response: count}
    state: GameState | null, // Game state is created once both players join, if null game hasn't started, meaning both players are in waiting room
    members: UID[] // 2 members only
} 

export type GameState = {
    round: number,
    stage: 1 | 2 | 3
    jokers: Record<UID, keyof typeof Jokers[]>, // {username: [joker1, joker2, joker3]}. 
    judge_index: 0 | 1, // Index of the member that is the judge

    // Role related
    judge_data: {
        prompt: string,
        selected_joker: string,
        ready: boolean, // If the submitted
    }
    
    respondent_data: {
        response: ResponseType,
        selected_joker: string,
        ready: boolean,
    }
}
    
/**
 * Socket events.
 * @enum {string}
 * @readonly
 * Used to avoid typos and to have a single source of truth
 */
export const enum Events {
    JOIN = "join room",

    PING = "ping", // (room_id: string) Ping the other player
    PONG = "pong", // (room_id: string) Pong, send after receiving a PING the other player

    ROOM_EXISTS = "room exists", // (room_id: string, callback: (exists: boolean) => void) Callback is used to return the result of the query
    
    GET_ROOM = "get room", // (room_id: string, callback: (room: RoomType) => void) Callback is used to return the result of the query
    UPDATE_ROOM = "update room", // (room_id: string, new_room: RoomType) => Update room value in dabatase
    RESET_ROOM = "reset room", // (room_id: string) => Reset room value in database

    PLAYER_JOINED = "player joined", // Called after JOIN. args (uid: UID) Tell other players that a player has joined
    PLAYER_LEFT = "player left", // Called after disconect. args (uid: UID) Tell other players that a player has left
}

export type ToastType = Writable<{
    type: "info" | "error" 
    title: string,
    message: string,
    duration?: number
} | null>;